/* tslint:disable */
/* eslint-disable */
/**
 * Composite API
 * Composite the game API
 *
 * The version of the OpenAPI document: 1.0.0-next.20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Rating
 */
export interface Rating {
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    value: number;
    /**
     * 
     * @type {string}
     * @memberof Rating
     */
    type: RatingTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Rating
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Rating
     */
    updatedAt: string;
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    userId: number;
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    levelId: number;
    /**
     * 
     * @type {string}
     * @memberof Rating
     */
    userLevelId: string;
}


/**
 * @export
 */
export const RatingTypeEnum = {
    Quality: 'QUALITY',
    Difficulty: 'DIFFICULTY'
} as const;
export type RatingTypeEnum = typeof RatingTypeEnum[keyof typeof RatingTypeEnum];


/**
 * Check if a given object implements the Rating interface.
 */
export function instanceOfRating(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "levelId" in value;
    isInstance = isInstance && "userLevelId" in value;

    return isInstance;
}

export function RatingFromJSON(json: any): Rating {
    return RatingFromJSONTyped(json, false);
}

export function RatingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Rating {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': json['value'],
        'type': json['type'],
        'id': json['id'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'userId': json['userId'],
        'levelId': json['levelId'],
        'userLevelId': json['userLevelId'],
    };
}

export function RatingToJSON(value?: Rating | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'type': value.type,
        'id': value.id,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'userId': value.userId,
        'levelId': value.levelId,
        'userLevelId': value.userLevelId,
    };
}

