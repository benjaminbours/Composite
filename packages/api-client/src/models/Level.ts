/* tslint:disable */
/* eslint-disable */
/**
 * Composite API
 * Composite the game API
 *
 * The version of the OpenAPI document: 1.0.0-next.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
} from './Author';
import type { Element } from './Element';
import {
    ElementFromJSON,
    ElementFromJSONTyped,
    ElementToJSON,
} from './Element';

/**
 * 
 * @export
 * @interface Level
 */
export interface Level {
    /**
     * 
     * @type {number}
     * @memberof Level
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Level
     */
    name: string;
    /**
     * 
     * @type {Array<Element>}
     * @memberof Level
     */
    data: Array<Element>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Level
     */
    lightStartPosition: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Level
     */
    shadowStartPosition: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof Level
     */
    likes: number;
    /**
     * 
     * @type {string}
     * @memberof Level
     */
    status: LevelStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Level
     */
    authorId: number;
    /**
     * 
     * @type {string}
     * @memberof Level
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Level
     */
    updatedAt: string;
    /**
     * 
     * @type {Author}
     * @memberof Level
     */
    author?: Author;
}


/**
 * @export
 */
export const LevelStatusEnum = {
    Draft: 'DRAFT',
    Published: 'PUBLISHED'
} as const;
export type LevelStatusEnum = typeof LevelStatusEnum[keyof typeof LevelStatusEnum];


/**
 * Check if a given object implements the Level interface.
 */
export function instanceOfLevel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "lightStartPosition" in value;
    isInstance = isInstance && "shadowStartPosition" in value;
    isInstance = isInstance && "likes" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "authorId" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function LevelFromJSON(json: any): Level {
    return LevelFromJSONTyped(json, false);
}

export function LevelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Level {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'data': ((json['data'] as Array<any>).map(ElementFromJSON)),
        'lightStartPosition': json['lightStartPosition'],
        'shadowStartPosition': json['shadowStartPosition'],
        'likes': json['likes'],
        'status': json['status'],
        'authorId': json['authorId'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'author': !exists(json, 'author') ? undefined : AuthorFromJSON(json['author']),
    };
}

export function LevelToJSON(value?: Level | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'data': ((value.data as Array<any>).map(ElementToJSON)),
        'lightStartPosition': value.lightStartPosition,
        'shadowStartPosition': value.shadowStartPosition,
        'likes': value.likes,
        'status': value.status,
        'authorId': value.authorId,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'author': AuthorToJSON(value.author),
    };
}

