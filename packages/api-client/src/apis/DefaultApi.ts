/* tslint:disable */
/* eslint-disable */
/**
 * Composite API
 * Composite the game API
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginDto,
  RegisterDto,
  ResetPasswordDto,
  TokensDto,
  UpdatePasswordDto,
} from '../models/index';
import {
    LoginDtoFromJSON,
    LoginDtoToJSON,
    RegisterDtoFromJSON,
    RegisterDtoToJSON,
    ResetPasswordDtoFromJSON,
    ResetPasswordDtoToJSON,
    TokensDtoFromJSON,
    TokensDtoToJSON,
    UpdatePasswordDtoFromJSON,
    UpdatePasswordDtoToJSON,
} from '../models/index';

export interface AppControllerCheckInviteValidityRequest {
    inviteToken: string;
}

export interface AuthControllerConfirmRequest {
    confirmationToken: string;
}

export interface AuthControllerConfirmResendRequest {
    resetPasswordDto: ResetPasswordDto;
}

export interface AuthControllerLoginRequest {
    loginDto: LoginDto;
}

export interface AuthControllerRegisterRequest {
    registerDto: RegisterDto;
}

export interface AuthControllerResetPasswordRequest {
    resetPasswordDto: ResetPasswordDto;
}

export interface AuthControllerUpdatePasswordRequest {
    resetPasswordToken: string;
    updatePasswordDto: UpdatePasswordDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async appControllerCheckInviteValidityRaw(requestParameters: AppControllerCheckInviteValidityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteToken === null || requestParameters.inviteToken === undefined) {
            throw new runtime.RequiredError('inviteToken','Required parameter requestParameters.inviteToken was null or undefined when calling appControllerCheckInviteValidity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/check-invite/{inviteToken}`.replace(`{${"inviteToken"}}`, encodeURIComponent(String(requestParameters.inviteToken))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerCheckInviteValidity(requestParameters: AppControllerCheckInviteValidityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appControllerCheckInviteValidityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appControllerGetQueueInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/queue-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerGetQueueInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appControllerGetQueueInfoRaw(initOverrides);
    }

    /**
     */
    async appControllerGetVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerGetVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appControllerGetVersionRaw(initOverrides);
    }

    /**
     */
    async authControllerConfirmRaw(requestParameters: AuthControllerConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.confirmationToken === null || requestParameters.confirmationToken === undefined) {
            throw new runtime.RequiredError('confirmationToken','Required parameter requestParameters.confirmationToken was null or undefined when calling authControllerConfirm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/confirm/{confirmationToken}`.replace(`{${"confirmationToken"}}`, encodeURIComponent(String(requestParameters.confirmationToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerConfirm(requestParameters: AuthControllerConfirmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerConfirmRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authControllerConfirmResendRaw(requestParameters: AuthControllerConfirmResendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.resetPasswordDto === null || requestParameters.resetPasswordDto === undefined) {
            throw new runtime.RequiredError('resetPasswordDto','Required parameter requestParameters.resetPasswordDto was null or undefined when calling authControllerConfirmResend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/confirm/resend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordDtoToJSON(requestParameters.resetPasswordDto),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async authControllerConfirmResend(requestParameters: AuthControllerConfirmResendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.authControllerConfirmResendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensDto>> {
        if (requestParameters.loginDto === null || requestParameters.loginDto === undefined) {
            throw new runtime.RequiredError('loginDto','Required parameter requestParameters.loginDto was null or undefined when calling authControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters.loginDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensDto> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async authControllerLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.authControllerLogoutRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerRefreshTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRefreshToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensDto> {
        const response = await this.authControllerRefreshTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerRegisterRaw(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensDto>> {
        if (requestParameters.registerDto === null || requestParameters.registerDto === undefined) {
            throw new runtime.RequiredError('registerDto','Required parameter requestParameters.registerDto was null or undefined when calling authControllerRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterDtoToJSON(requestParameters.registerDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRegister(requestParameters: AuthControllerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensDto> {
        const response = await this.authControllerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerResetPasswordRaw(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.resetPasswordDto === null || requestParameters.resetPasswordDto === undefined) {
            throw new runtime.RequiredError('resetPasswordDto','Required parameter requestParameters.resetPasswordDto was null or undefined when calling authControllerResetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordDtoToJSON(requestParameters.resetPasswordDto),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async authControllerResetPassword(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.authControllerResetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerUpdatePasswordRaw(requestParameters: AuthControllerUpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.resetPasswordToken === null || requestParameters.resetPasswordToken === undefined) {
            throw new runtime.RequiredError('resetPasswordToken','Required parameter requestParameters.resetPasswordToken was null or undefined when calling authControllerUpdatePassword.');
        }

        if (requestParameters.updatePasswordDto === null || requestParameters.updatePasswordDto === undefined) {
            throw new runtime.RequiredError('updatePasswordDto','Required parameter requestParameters.updatePasswordDto was null or undefined when calling authControllerUpdatePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/update-password/{resetPasswordToken}`.replace(`{${"resetPasswordToken"}}`, encodeURIComponent(String(requestParameters.resetPasswordToken))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasswordDtoToJSON(requestParameters.updatePasswordDto),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async authControllerUpdatePassword(requestParameters: AuthControllerUpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.authControllerUpdatePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
