version: "3.8"

services:
  db:
    container_name: composite_db
    image: postgres:latest
    restart: always
    networks:
      - database
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    env_file:
      - ./back/.env

  adminer:
    container_name: composite_adminer
    image: adminer
    ports:
      - 8080:8080

  cache:
    container_name: composite_cache
    image: redis:latest
    restart: always
    networks:
      - main
    depends_on:
      - db
    volumes:
      - ./cache:/data

  traefik:
    container_name: composite_gateway
    image: traefik:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
    # Traefik has to be in all networks in order to resolve propery the containers it is trying to contact
    networks:
      - main
      - database

  api:
    restart: always
    # deploy:
    #   mode: replicated
    #   replicas: 2
    build:
      context: .
      dockerfile: ./back/Dockerfile.back
      args:
        NPM_TOKEN: ${NPM_TOKEN}
    networks:
      - main
      - database
    depends_on:
      - db
    env_file:
      - ./back/.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.localhost`)
      # https://community.traefik.io/t/solved-strange-504-gateway-timeout-behaviour/10573
      # TODO: Verify if its efficient...
      - traefik.docker.network=main
      - traefik.http.services.api.loadbalancer.server.port=3002
      - traefik.http.services.api.loadBalancer.sticky.cookie.name=server_id
      - traefik.http.services.api.loadBalancer.sticky.cookie.httpOnly=true
      - traefik.http.middlewares.api_middleware.headers.accesscontrolalloworiginlist=http://front.localhost
      - traefik.http.middlewares.api_middleware.headers.accessControlAllowCredentials=true
      - traefik.http.middlewares.api_middleware.headers.accessControlAllowHeaders=Content-Type,Authorization
      - traefik.http.middlewares.api_middleware.headers.accessControlAllowMethods=GET,POST,DELETE,PATCH
      - traefik.http.routers.api.middlewares=api_middleware

  front:
    restart: always
    build:
      context: .
      dockerfile: ./front/Dockerfile.front
      args:
        NPM_TOKEN: ${NPM_TOKEN}
    env_file:
      - ./front/.env
    networks:
      - main
    labels:
      - traefik.enable=true
      - traefik.http.routers.front.rule=Host(`front.localhost`)
      - traefik.http.services.front.loadbalancer.server.port=3000

networks:
  main:
  database:
