// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Role {
//   id          Int    @id @default(autoincrement())
//   name        String @unique @db.VarChar(255)
//   permissions Json
//   // relations
//   // All the users having this role
//   user        User[]
// }

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  name     String @db.VarChar(50)

  confirmationToken  String? @db.VarChar(255)
  hashedRefreshToken String? @db.VarChar(255)
  resetPasswordToken String? @db.VarChar(255)
  role               Role

  // relations
  levels Level[]
  Player Player[]
}

enum Role {
  ADMIN
  USER
}

enum LevelStatus {
  DRAFT
  PUBLISHED
}

model Level {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String      @unique @db.VarChar(50)
  likes  Int         @default(0)
  status LevelStatus
  data   Json

  // relations
  games  Game[]
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

enum GameStatus {
  STARTED
  FINISHED
  NOT_FINISHED
}

model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status    GameStatus
  startTime DateTime
  endTime   DateTime?

  players Player[]

  // relations
  levelId Int
  level   Level @relation(fields: [levelId], references: [id])
}

enum PlayerSide {
  SHADOW
  LIGHT
}

model Player {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  side PlayerSide

  // relations
  games  Game[]
  user   User?  @relation(fields: [userId], references: [id])
  userId Int?
}
