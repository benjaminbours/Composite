# Dev
FROM node:18-alpine AS dev

WORKDIR /app
RUN apk add --update --no-cache openssl
RUN apk add --update --no-cache \
    make \
    g++ \
    jpeg-dev \
    cairo-dev \
    giflib-dev \
    pango-dev \
    libtool \
    autoconf \
    automake

COPY . .

RUN npm i
RUN npm run build -w packages
RUN cd back && npx prisma generate
ENTRYPOINT ["npm", "run", "start:dev", "-w", "back"]

# Staging
FROM dev as build-staging
ENV NODE_ENV production
ARG POSTGRES_USER
ENV POSTGRES_USER ${POSTGRES_USER}
ARG POSTGRES_PASSWORD
ENV POSTGRES_PASSWORD ${POSTGRES_PASSWORD}
ARG POSTGRES_DB
ENV POSTGRES_DB ${POSTGRES_DB}
ENV DATABASE_URL postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=public
ENV REDIS_URL redis://cache:6379
ENV STAGE staging
ARG NPM_TOKEN
ENV NPM_TOKEN ${NPM_TOKEN}

RUN npm run build -w back

FROM node:18-alpine AS base
WORKDIR /app
RUN apk add --update --no-cache openssl
RUN apk add --update --no-cache \
    make \
    g++ \
    jpeg-dev \
    cairo-dev \
    giflib-dev \
    pango-dev \
    libtool \
    autoconf \
    automake

FROM base AS staging
ENV NODE_ENV production
ARG NPM_TOKEN
ENV NPM_TOKEN ${NPM_TOKEN}
ENV STAGE staging
WORKDIR /app
COPY --from=build-staging /app/back/dist ./dist
COPY --from=build-staging /app/back/prisma ./prisma
COPY --from=build-staging /app/back/locales ./locales
COPY --from=build-staging /app/back/package*.json ./
COPY --from=build-staging /app/back/assets.glb ./
COPY --from=build-staging /app/.npmrc ./
RUN npm i --omit=dev
RUN npx prisma generate

ENTRYPOINT ["npm", "run", "start:prod"]