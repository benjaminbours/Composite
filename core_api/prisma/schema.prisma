// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Role {
//   id          Int    @id @default(autoincrement())
//   name        String @unique @db.VarChar(255)
//   permissions Json
//   // relations
//   // All the users having this role
//   user        User[]
// }

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique @db.VarChar(255)
  name     String @unique @db.VarChar(50)
  password String @db.VarChar(255)

  confirmationToken  String? @db.VarChar(255)
  hashedRefreshToken String? @db.VarChar(255)
  resetPasswordToken String? @db.VarChar(255)
  role               Role

  // relations
  levels  Level[]
  Player  Player[]
  ratings Rating[]
}

enum Role {
  ADMIN
  USER
}

enum LevelStatus {
  DRAFT
  PUBLISHED
}

model Level {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String      @unique @db.VarChar(50)
  status              LevelStatus
  data                Json
  // TODO: Could be just one array of start position and using index to manage shadow and light
  lightStartPosition  Float[]
  shadowStartPosition Float[]
  thumbnail           String?

  // relations
  games    Game[]
  author   User     @relation(fields: [authorId], references: [id])
  authorId Int
  ratings  Rating[]
}

enum RatingType {
  QUALITY
  DIFFICULTY
}

model Rating {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        RatingType
  value       Float
  // a unique string which is concatenation of userId and levelId + type
  userLevelId String     @unique

  // relations
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  level   Level @relation(fields: [levelId], references: [id])
  levelId Int
}

enum GameStatus {
  STARTED
  FINISHED
}

enum GameMode {
  SINGLE_PLAYER
  MULTI_PLAYER
}

enum GameDevice {
  DESKTOP
  MOBILE
}

model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status   GameStatus
  duration Float
  // TODO: Remove this field. It's ugly, it should be like player count
  // or it should not exist and we use the array of players to know the count
  mode     GameMode
  device   GameDevice

  startTime Float
  region    String @default("STRASBOURG")

  // relations
  players Player[]
  levelId Int
  level   Level    @relation(fields: [levelId], references: [id])
}

enum PlayerSide {
  SHADOW
  LIGHT
}

model Player {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  side PlayerSide

  // relations
  games  Game[]
  user   User?  @relation(fields: [userId], references: [id])
  userId Int?
}
